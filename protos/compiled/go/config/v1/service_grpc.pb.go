// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: service.proto

package config_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConfigService_GetPalWorldSettings_FullMethodName    = "/config.v1.ConfigService/GetPalWorldSettings"
	ConfigService_UpdatePalWorldSettings_FullMethodName = "/config.v1.ConfigService/UpdatePalWorldSettings"
	ConfigService_ResetPalWorldSettings_FullMethodName  = "/config.v1.ConfigService/ResetPalWorldSettings"
)

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConfigServiceClient interface {
	GetPalWorldSettings(ctx context.Context, in *GetPalWorldSettingsRequest, opts ...grpc.CallOption) (*GetPalWorldSettingsResponse, error)
	UpdatePalWorldSettings(ctx context.Context, in *UpdatePalWorldSettingsRequest, opts ...grpc.CallOption) (*UpdatePalWorldSettingsResponse, error)
	ResetPalWorldSettings(ctx context.Context, in *ResetPalWorldSettingsRequest, opts ...grpc.CallOption) (*ResetPalWorldSettingsResponse, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) GetPalWorldSettings(ctx context.Context, in *GetPalWorldSettingsRequest, opts ...grpc.CallOption) (*GetPalWorldSettingsResponse, error) {
	out := new(GetPalWorldSettingsResponse)
	err := c.cc.Invoke(ctx, ConfigService_GetPalWorldSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) UpdatePalWorldSettings(ctx context.Context, in *UpdatePalWorldSettingsRequest, opts ...grpc.CallOption) (*UpdatePalWorldSettingsResponse, error) {
	out := new(UpdatePalWorldSettingsResponse)
	err := c.cc.Invoke(ctx, ConfigService_UpdatePalWorldSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) ResetPalWorldSettings(ctx context.Context, in *ResetPalWorldSettingsRequest, opts ...grpc.CallOption) (*ResetPalWorldSettingsResponse, error) {
	out := new(ResetPalWorldSettingsResponse)
	err := c.cc.Invoke(ctx, ConfigService_ResetPalWorldSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
// All implementations must embed UnimplementedConfigServiceServer
// for forward compatibility
type ConfigServiceServer interface {
	GetPalWorldSettings(context.Context, *GetPalWorldSettingsRequest) (*GetPalWorldSettingsResponse, error)
	UpdatePalWorldSettings(context.Context, *UpdatePalWorldSettingsRequest) (*UpdatePalWorldSettingsResponse, error)
	ResetPalWorldSettings(context.Context, *ResetPalWorldSettingsRequest) (*ResetPalWorldSettingsResponse, error)
	mustEmbedUnimplementedConfigServiceServer()
}

// UnimplementedConfigServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConfigServiceServer struct {
}

func (UnimplementedConfigServiceServer) GetPalWorldSettings(context.Context, *GetPalWorldSettingsRequest) (*GetPalWorldSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPalWorldSettings not implemented")
}
func (UnimplementedConfigServiceServer) UpdatePalWorldSettings(context.Context, *UpdatePalWorldSettingsRequest) (*UpdatePalWorldSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePalWorldSettings not implemented")
}
func (UnimplementedConfigServiceServer) ResetPalWorldSettings(context.Context, *ResetPalWorldSettingsRequest) (*ResetPalWorldSettingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPalWorldSettings not implemented")
}
func (UnimplementedConfigServiceServer) mustEmbedUnimplementedConfigServiceServer() {}

// UnsafeConfigServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConfigServiceServer will
// result in compilation errors.
type UnsafeConfigServiceServer interface {
	mustEmbedUnimplementedConfigServiceServer()
}

func RegisterConfigServiceServer(s grpc.ServiceRegistrar, srv ConfigServiceServer) {
	s.RegisterService(&ConfigService_ServiceDesc, srv)
}

func _ConfigService_GetPalWorldSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPalWorldSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).GetPalWorldSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_GetPalWorldSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).GetPalWorldSettings(ctx, req.(*GetPalWorldSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_UpdatePalWorldSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePalWorldSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).UpdatePalWorldSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_UpdatePalWorldSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).UpdatePalWorldSettings(ctx, req.(*UpdatePalWorldSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_ResetPalWorldSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPalWorldSettingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).ResetPalWorldSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConfigService_ResetPalWorldSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).ResetPalWorldSettings(ctx, req.(*ResetPalWorldSettingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConfigService_ServiceDesc is the grpc.ServiceDesc for ConfigService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConfigService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "config.v1.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPalWorldSettings",
			Handler:    _ConfigService_GetPalWorldSettings_Handler,
		},
		{
			MethodName: "UpdatePalWorldSettings",
			Handler:    _ConfigService_UpdatePalWorldSettings_Handler,
		},
		{
			MethodName: "ResetPalWorldSettings",
			Handler:    _ConfigService_ResetPalWorldSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
