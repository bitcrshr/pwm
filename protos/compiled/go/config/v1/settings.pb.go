// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        v4.23.2
// source: settings.proto

package config_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PalWorldSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Difficulty                           string  `protobuf:"bytes,1,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	DayTimeSpeedRate                     float32 `protobuf:"fixed32,2,opt,name=day_time_speed_rate,json=dayTimeSpeedRate,proto3" json:"day_time_speed_rate,omitempty"`
	NightTimeSpeedRate                   float32 `protobuf:"fixed32,3,opt,name=night_time_speed_rate,json=nightTimeSpeedRate,proto3" json:"night_time_speed_rate,omitempty"`
	ExpRate                              float32 `protobuf:"fixed32,4,opt,name=exp_rate,json=expRate,proto3" json:"exp_rate,omitempty"`
	PalCaptureRate                       float32 `protobuf:"fixed32,5,opt,name=pal_capture_rate,json=palCaptureRate,proto3" json:"pal_capture_rate,omitempty"`
	PalSpawnNumRate                      float32 `protobuf:"fixed32,6,opt,name=pal_spawn_num_rate,json=palSpawnNumRate,proto3" json:"pal_spawn_num_rate,omitempty"`
	PalDamageRateAttack                  float32 `protobuf:"fixed32,7,opt,name=pal_damage_rate_attack,json=palDamageRateAttack,proto3" json:"pal_damage_rate_attack,omitempty"`
	PalDamageRateDefense                 float32 `protobuf:"fixed32,8,opt,name=pal_damage_rate_defense,json=palDamageRateDefense,proto3" json:"pal_damage_rate_defense,omitempty"`
	PlayerDamageRateAttack               float32 `protobuf:"fixed32,9,opt,name=player_damage_rate_attack,json=playerDamageRateAttack,proto3" json:"player_damage_rate_attack,omitempty"`
	PlayerDamageRateDefense              float32 `protobuf:"fixed32,10,opt,name=player_damage_rate_defense,json=playerDamageRateDefense,proto3" json:"player_damage_rate_defense,omitempty"`
	PlayerStomachDecreaseRate            float32 `protobuf:"fixed32,11,opt,name=player_stomach_decrease_rate,json=playerStomachDecreaseRate,proto3" json:"player_stomach_decrease_rate,omitempty"`
	PlayerStaminaDecreaseRate            float32 `protobuf:"fixed32,12,opt,name=player_stamina_decrease_rate,json=playerStaminaDecreaseRate,proto3" json:"player_stamina_decrease_rate,omitempty"`
	PlayerAutoHpRegenRate                float32 `protobuf:"fixed32,13,opt,name=player_auto_hp_regen_rate,json=playerAutoHpRegenRate,proto3" json:"player_auto_hp_regen_rate,omitempty"`
	PlayerAutoHpRegenRateInSleep         float32 `protobuf:"fixed32,14,opt,name=player_auto_hp_regen_rate_in_sleep,json=playerAutoHpRegenRateInSleep,proto3" json:"player_auto_hp_regen_rate_in_sleep,omitempty"`
	PalStomachDecreaseRate               float32 `protobuf:"fixed32,15,opt,name=pal_stomach_decrease_rate,json=palStomachDecreaseRate,proto3" json:"pal_stomach_decrease_rate,omitempty"`
	PalStaminaDecreaseRate               float32 `protobuf:"fixed32,16,opt,name=pal_stamina_decrease_rate,json=palStaminaDecreaseRate,proto3" json:"pal_stamina_decrease_rate,omitempty"`
	PalAutoHpRegenRate                   float32 `protobuf:"fixed32,17,opt,name=pal_auto_hp_regen_rate,json=palAutoHpRegenRate,proto3" json:"pal_auto_hp_regen_rate,omitempty"`
	PalAutoHpRegenRateInSleep            float32 `protobuf:"fixed32,18,opt,name=pal_auto_hp_regen_rate_in_sleep,json=palAutoHpRegenRateInSleep,proto3" json:"pal_auto_hp_regen_rate_in_sleep,omitempty"`
	BuildObjectDamageRate                float32 `protobuf:"fixed32,19,opt,name=build_object_damage_rate,json=buildObjectDamageRate,proto3" json:"build_object_damage_rate,omitempty"`
	BuildObjectDeteriorationDamageRate   float32 `protobuf:"fixed32,20,opt,name=build_object_deterioration_damage_rate,json=buildObjectDeteriorationDamageRate,proto3" json:"build_object_deterioration_damage_rate,omitempty"`
	CollectionDropRate                   float32 `protobuf:"fixed32,21,opt,name=collection_drop_rate,json=collectionDropRate,proto3" json:"collection_drop_rate,omitempty"`
	CollectionObjectHpRate               float32 `protobuf:"fixed32,22,opt,name=collection_object_hp_rate,json=collectionObjectHpRate,proto3" json:"collection_object_hp_rate,omitempty"`
	CollectionObjectRespawnSpeedRate     float32 `protobuf:"fixed32,23,opt,name=collection_object_respawn_speed_rate,json=collectionObjectRespawnSpeedRate,proto3" json:"collection_object_respawn_speed_rate,omitempty"`
	EnemyDropItemRate                    float32 `protobuf:"fixed32,24,opt,name=enemy_drop_item_rate,json=enemyDropItemRate,proto3" json:"enemy_drop_item_rate,omitempty"`
	DeathPenalty                         string  `protobuf:"bytes,25,opt,name=death_penalty,json=deathPenalty,proto3" json:"death_penalty,omitempty"`
	BEnablePlayerToPlayerDamage          bool    `protobuf:"varint,26,opt,name=b_enable_player_to_player_damage,json=bEnablePlayerToPlayerDamage,proto3" json:"b_enable_player_to_player_damage,omitempty"`
	BEnableFriendlyFire                  bool    `protobuf:"varint,27,opt,name=b_enable_friendly_fire,json=bEnableFriendlyFire,proto3" json:"b_enable_friendly_fire,omitempty"`
	BEnableInvaderEnemy                  bool    `protobuf:"varint,28,opt,name=b_enable_invader_enemy,json=bEnableInvaderEnemy,proto3" json:"b_enable_invader_enemy,omitempty"`
	BActiveUnko                          bool    `protobuf:"varint,29,opt,name=b_active_unko,json=bActiveUnko,proto3" json:"b_active_unko,omitempty"`
	BEnableAimAssistPad                  bool    `protobuf:"varint,30,opt,name=b_enable_aim_assist_pad,json=bEnableAimAssistPad,proto3" json:"b_enable_aim_assist_pad,omitempty"`
	BEnableAimAssistKeyboard             bool    `protobuf:"varint,31,opt,name=b_enable_aim_assist_keyboard,json=bEnableAimAssistKeyboard,proto3" json:"b_enable_aim_assist_keyboard,omitempty"`
	DropItemMaxNum                       int32   `protobuf:"varint,32,opt,name=drop_item_max_num,json=dropItemMaxNum,proto3" json:"drop_item_max_num,omitempty"`
	DropItemMaxNumUnko                   int32   `protobuf:"varint,33,opt,name=drop_item_max_num_unko,json=dropItemMaxNumUnko,proto3" json:"drop_item_max_num_unko,omitempty"`
	BaseCampMaxNum                       int32   `protobuf:"varint,34,opt,name=base_camp_max_num,json=baseCampMaxNum,proto3" json:"base_camp_max_num,omitempty"`
	BaseCampWorkerMaxNum                 int32   `protobuf:"varint,35,opt,name=base_camp_worker_max_num,json=baseCampWorkerMaxNum,proto3" json:"base_camp_worker_max_num,omitempty"`
	DropItemAliveMaxHours                float32 `protobuf:"fixed32,36,opt,name=drop_item_alive_max_hours,json=dropItemAliveMaxHours,proto3" json:"drop_item_alive_max_hours,omitempty"`
	BAutoResetGuildNoOnlinePlayers       bool    `protobuf:"varint,37,opt,name=b_auto_reset_guild_no_online_players,json=bAutoResetGuildNoOnlinePlayers,proto3" json:"b_auto_reset_guild_no_online_players,omitempty"`
	AutoResetGuildTimeNoOnlinePlayers    float32 `protobuf:"fixed32,38,opt,name=auto_reset_guild_time_no_online_players,json=autoResetGuildTimeNoOnlinePlayers,proto3" json:"auto_reset_guild_time_no_online_players,omitempty"`
	GuildPlayerMaxNum                    int32   `protobuf:"varint,39,opt,name=guild_player_max_num,json=guildPlayerMaxNum,proto3" json:"guild_player_max_num,omitempty"`
	PalEggDefaultHatchingTime            float32 `protobuf:"fixed32,40,opt,name=pal_egg_default_hatching_time,json=palEggDefaultHatchingTime,proto3" json:"pal_egg_default_hatching_time,omitempty"`
	WorkSpeedRate                        float32 `protobuf:"fixed32,41,opt,name=work_speed_rate,json=workSpeedRate,proto3" json:"work_speed_rate,omitempty"`
	BIsMultiplay                         bool    `protobuf:"varint,42,opt,name=b_is_multiplay,json=bIsMultiplay,proto3" json:"b_is_multiplay,omitempty"`
	BIsPvp                               bool    `protobuf:"varint,43,opt,name=b_is_pvp,json=bIsPvp,proto3" json:"b_is_pvp,omitempty"`
	BCanPickupOtherGuildDeathPenaltyDrop bool    `protobuf:"varint,44,opt,name=b_can_pickup_other_guild_death_penalty_drop,json=bCanPickupOtherGuildDeathPenaltyDrop,proto3" json:"b_can_pickup_other_guild_death_penalty_drop,omitempty"`
	BEnableNonLoginPenalty               bool    `protobuf:"varint,45,opt,name=b_enable_non_login_penalty,json=bEnableNonLoginPenalty,proto3" json:"b_enable_non_login_penalty,omitempty"`
	BEnableFastTravel                    bool    `protobuf:"varint,46,opt,name=b_enable_fast_travel,json=bEnableFastTravel,proto3" json:"b_enable_fast_travel,omitempty"`
	BIsStartLocationSelectByMap          bool    `protobuf:"varint,47,opt,name=b_is_start_location_select_by_map,json=bIsStartLocationSelectByMap,proto3" json:"b_is_start_location_select_by_map,omitempty"`
	BExistPlayerAfterLogout              bool    `protobuf:"varint,48,opt,name=b_exist_player_after_logout,json=bExistPlayerAfterLogout,proto3" json:"b_exist_player_after_logout,omitempty"`
	BEnableDefenseOtherGuildPlayer       bool    `protobuf:"varint,49,opt,name=b_enable_defense_other_guild_player,json=bEnableDefenseOtherGuildPlayer,proto3" json:"b_enable_defense_other_guild_player,omitempty"`
	CoopPlayerMaxNum                     int32   `protobuf:"varint,50,opt,name=coop_player_max_num,json=coopPlayerMaxNum,proto3" json:"coop_player_max_num,omitempty"`
	ServerPlayerMaxNum                   int32   `protobuf:"varint,51,opt,name=server_player_max_num,json=serverPlayerMaxNum,proto3" json:"server_player_max_num,omitempty"`
	ServerName                           string  `protobuf:"bytes,52,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	ServerDescription                    string  `protobuf:"bytes,53,opt,name=server_description,json=serverDescription,proto3" json:"server_description,omitempty"`
	AdminPassword                        string  `protobuf:"bytes,54,opt,name=admin_password,json=adminPassword,proto3" json:"admin_password,omitempty"`
	ServerPassword                       string  `protobuf:"bytes,55,opt,name=server_password,json=serverPassword,proto3" json:"server_password,omitempty"`
	PublicPort                           int32   `protobuf:"varint,56,opt,name=public_port,json=publicPort,proto3" json:"public_port,omitempty"`
	PublicIp                             string  `protobuf:"bytes,57,opt,name=public_ip,json=publicIp,proto3" json:"public_ip,omitempty"`
	RconEnabled                          bool    `protobuf:"varint,58,opt,name=rcon_enabled,json=rconEnabled,proto3" json:"rcon_enabled,omitempty"`
	RconPort                             int32   `protobuf:"varint,59,opt,name=rcon_port,json=rconPort,proto3" json:"rcon_port,omitempty"`
	Region                               string  `protobuf:"bytes,60,opt,name=region,proto3" json:"region,omitempty"`
	BUseAuth                             bool    `protobuf:"varint,61,opt,name=b_use_auth,json=bUseAuth,proto3" json:"b_use_auth,omitempty"`
	BanListUrl                           string  `protobuf:"bytes,62,opt,name=ban_list_url,json=banListUrl,proto3" json:"ban_list_url,omitempty"`
}

func (x *PalWorldSettings) Reset() {
	*x = PalWorldSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PalWorldSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PalWorldSettings) ProtoMessage() {}

func (x *PalWorldSettings) ProtoReflect() protoreflect.Message {
	mi := &file_settings_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PalWorldSettings.ProtoReflect.Descriptor instead.
func (*PalWorldSettings) Descriptor() ([]byte, []int) {
	return file_settings_proto_rawDescGZIP(), []int{0}
}

func (x *PalWorldSettings) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *PalWorldSettings) GetDayTimeSpeedRate() float32 {
	if x != nil {
		return x.DayTimeSpeedRate
	}
	return 0
}

func (x *PalWorldSettings) GetNightTimeSpeedRate() float32 {
	if x != nil {
		return x.NightTimeSpeedRate
	}
	return 0
}

func (x *PalWorldSettings) GetExpRate() float32 {
	if x != nil {
		return x.ExpRate
	}
	return 0
}

func (x *PalWorldSettings) GetPalCaptureRate() float32 {
	if x != nil {
		return x.PalCaptureRate
	}
	return 0
}

func (x *PalWorldSettings) GetPalSpawnNumRate() float32 {
	if x != nil {
		return x.PalSpawnNumRate
	}
	return 0
}

func (x *PalWorldSettings) GetPalDamageRateAttack() float32 {
	if x != nil {
		return x.PalDamageRateAttack
	}
	return 0
}

func (x *PalWorldSettings) GetPalDamageRateDefense() float32 {
	if x != nil {
		return x.PalDamageRateDefense
	}
	return 0
}

func (x *PalWorldSettings) GetPlayerDamageRateAttack() float32 {
	if x != nil {
		return x.PlayerDamageRateAttack
	}
	return 0
}

func (x *PalWorldSettings) GetPlayerDamageRateDefense() float32 {
	if x != nil {
		return x.PlayerDamageRateDefense
	}
	return 0
}

func (x *PalWorldSettings) GetPlayerStomachDecreaseRate() float32 {
	if x != nil {
		return x.PlayerStomachDecreaseRate
	}
	return 0
}

func (x *PalWorldSettings) GetPlayerStaminaDecreaseRate() float32 {
	if x != nil {
		return x.PlayerStaminaDecreaseRate
	}
	return 0
}

func (x *PalWorldSettings) GetPlayerAutoHpRegenRate() float32 {
	if x != nil {
		return x.PlayerAutoHpRegenRate
	}
	return 0
}

func (x *PalWorldSettings) GetPlayerAutoHpRegenRateInSleep() float32 {
	if x != nil {
		return x.PlayerAutoHpRegenRateInSleep
	}
	return 0
}

func (x *PalWorldSettings) GetPalStomachDecreaseRate() float32 {
	if x != nil {
		return x.PalStomachDecreaseRate
	}
	return 0
}

func (x *PalWorldSettings) GetPalStaminaDecreaseRate() float32 {
	if x != nil {
		return x.PalStaminaDecreaseRate
	}
	return 0
}

func (x *PalWorldSettings) GetPalAutoHpRegenRate() float32 {
	if x != nil {
		return x.PalAutoHpRegenRate
	}
	return 0
}

func (x *PalWorldSettings) GetPalAutoHpRegenRateInSleep() float32 {
	if x != nil {
		return x.PalAutoHpRegenRateInSleep
	}
	return 0
}

func (x *PalWorldSettings) GetBuildObjectDamageRate() float32 {
	if x != nil {
		return x.BuildObjectDamageRate
	}
	return 0
}

func (x *PalWorldSettings) GetBuildObjectDeteriorationDamageRate() float32 {
	if x != nil {
		return x.BuildObjectDeteriorationDamageRate
	}
	return 0
}

func (x *PalWorldSettings) GetCollectionDropRate() float32 {
	if x != nil {
		return x.CollectionDropRate
	}
	return 0
}

func (x *PalWorldSettings) GetCollectionObjectHpRate() float32 {
	if x != nil {
		return x.CollectionObjectHpRate
	}
	return 0
}

func (x *PalWorldSettings) GetCollectionObjectRespawnSpeedRate() float32 {
	if x != nil {
		return x.CollectionObjectRespawnSpeedRate
	}
	return 0
}

func (x *PalWorldSettings) GetEnemyDropItemRate() float32 {
	if x != nil {
		return x.EnemyDropItemRate
	}
	return 0
}

func (x *PalWorldSettings) GetDeathPenalty() string {
	if x != nil {
		return x.DeathPenalty
	}
	return ""
}

func (x *PalWorldSettings) GetBEnablePlayerToPlayerDamage() bool {
	if x != nil {
		return x.BEnablePlayerToPlayerDamage
	}
	return false
}

func (x *PalWorldSettings) GetBEnableFriendlyFire() bool {
	if x != nil {
		return x.BEnableFriendlyFire
	}
	return false
}

func (x *PalWorldSettings) GetBEnableInvaderEnemy() bool {
	if x != nil {
		return x.BEnableInvaderEnemy
	}
	return false
}

func (x *PalWorldSettings) GetBActiveUnko() bool {
	if x != nil {
		return x.BActiveUnko
	}
	return false
}

func (x *PalWorldSettings) GetBEnableAimAssistPad() bool {
	if x != nil {
		return x.BEnableAimAssistPad
	}
	return false
}

func (x *PalWorldSettings) GetBEnableAimAssistKeyboard() bool {
	if x != nil {
		return x.BEnableAimAssistKeyboard
	}
	return false
}

func (x *PalWorldSettings) GetDropItemMaxNum() int32 {
	if x != nil {
		return x.DropItemMaxNum
	}
	return 0
}

func (x *PalWorldSettings) GetDropItemMaxNumUnko() int32 {
	if x != nil {
		return x.DropItemMaxNumUnko
	}
	return 0
}

func (x *PalWorldSettings) GetBaseCampMaxNum() int32 {
	if x != nil {
		return x.BaseCampMaxNum
	}
	return 0
}

func (x *PalWorldSettings) GetBaseCampWorkerMaxNum() int32 {
	if x != nil {
		return x.BaseCampWorkerMaxNum
	}
	return 0
}

func (x *PalWorldSettings) GetDropItemAliveMaxHours() float32 {
	if x != nil {
		return x.DropItemAliveMaxHours
	}
	return 0
}

func (x *PalWorldSettings) GetBAutoResetGuildNoOnlinePlayers() bool {
	if x != nil {
		return x.BAutoResetGuildNoOnlinePlayers
	}
	return false
}

func (x *PalWorldSettings) GetAutoResetGuildTimeNoOnlinePlayers() float32 {
	if x != nil {
		return x.AutoResetGuildTimeNoOnlinePlayers
	}
	return 0
}

func (x *PalWorldSettings) GetGuildPlayerMaxNum() int32 {
	if x != nil {
		return x.GuildPlayerMaxNum
	}
	return 0
}

func (x *PalWorldSettings) GetPalEggDefaultHatchingTime() float32 {
	if x != nil {
		return x.PalEggDefaultHatchingTime
	}
	return 0
}

func (x *PalWorldSettings) GetWorkSpeedRate() float32 {
	if x != nil {
		return x.WorkSpeedRate
	}
	return 0
}

func (x *PalWorldSettings) GetBIsMultiplay() bool {
	if x != nil {
		return x.BIsMultiplay
	}
	return false
}

func (x *PalWorldSettings) GetBIsPvp() bool {
	if x != nil {
		return x.BIsPvp
	}
	return false
}

func (x *PalWorldSettings) GetBCanPickupOtherGuildDeathPenaltyDrop() bool {
	if x != nil {
		return x.BCanPickupOtherGuildDeathPenaltyDrop
	}
	return false
}

func (x *PalWorldSettings) GetBEnableNonLoginPenalty() bool {
	if x != nil {
		return x.BEnableNonLoginPenalty
	}
	return false
}

func (x *PalWorldSettings) GetBEnableFastTravel() bool {
	if x != nil {
		return x.BEnableFastTravel
	}
	return false
}

func (x *PalWorldSettings) GetBIsStartLocationSelectByMap() bool {
	if x != nil {
		return x.BIsStartLocationSelectByMap
	}
	return false
}

func (x *PalWorldSettings) GetBExistPlayerAfterLogout() bool {
	if x != nil {
		return x.BExistPlayerAfterLogout
	}
	return false
}

func (x *PalWorldSettings) GetBEnableDefenseOtherGuildPlayer() bool {
	if x != nil {
		return x.BEnableDefenseOtherGuildPlayer
	}
	return false
}

func (x *PalWorldSettings) GetCoopPlayerMaxNum() int32 {
	if x != nil {
		return x.CoopPlayerMaxNum
	}
	return 0
}

func (x *PalWorldSettings) GetServerPlayerMaxNum() int32 {
	if x != nil {
		return x.ServerPlayerMaxNum
	}
	return 0
}

func (x *PalWorldSettings) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *PalWorldSettings) GetServerDescription() string {
	if x != nil {
		return x.ServerDescription
	}
	return ""
}

func (x *PalWorldSettings) GetAdminPassword() string {
	if x != nil {
		return x.AdminPassword
	}
	return ""
}

func (x *PalWorldSettings) GetServerPassword() string {
	if x != nil {
		return x.ServerPassword
	}
	return ""
}

func (x *PalWorldSettings) GetPublicPort() int32 {
	if x != nil {
		return x.PublicPort
	}
	return 0
}

func (x *PalWorldSettings) GetPublicIp() string {
	if x != nil {
		return x.PublicIp
	}
	return ""
}

func (x *PalWorldSettings) GetRconEnabled() bool {
	if x != nil {
		return x.RconEnabled
	}
	return false
}

func (x *PalWorldSettings) GetRconPort() int32 {
	if x != nil {
		return x.RconPort
	}
	return 0
}

func (x *PalWorldSettings) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *PalWorldSettings) GetBUseAuth() bool {
	if x != nil {
		return x.BUseAuth
	}
	return false
}

func (x *PalWorldSettings) GetBanListUrl() string {
	if x != nil {
		return x.BanListUrl
	}
	return ""
}

type GetPalWorldSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetPalWorldSettingsRequest) Reset() {
	*x = GetPalWorldSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPalWorldSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPalWorldSettingsRequest) ProtoMessage() {}

func (x *GetPalWorldSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPalWorldSettingsRequest.ProtoReflect.Descriptor instead.
func (*GetPalWorldSettingsRequest) Descriptor() ([]byte, []int) {
	return file_settings_proto_rawDescGZIP(), []int{1}
}

type GetPalWorldSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *PalWorldSettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *GetPalWorldSettingsResponse) Reset() {
	*x = GetPalWorldSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPalWorldSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPalWorldSettingsResponse) ProtoMessage() {}

func (x *GetPalWorldSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPalWorldSettingsResponse.ProtoReflect.Descriptor instead.
func (*GetPalWorldSettingsResponse) Descriptor() ([]byte, []int) {
	return file_settings_proto_rawDescGZIP(), []int{2}
}

func (x *GetPalWorldSettingsResponse) GetSettings() *PalWorldSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type UpdatePalWorldSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings    *PalWorldSettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
	UpdatePaths []string          `protobuf:"bytes,2,rep,name=update_paths,json=updatePaths,proto3" json:"update_paths,omitempty"`
}

func (x *UpdatePalWorldSettingsRequest) Reset() {
	*x = UpdatePalWorldSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePalWorldSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePalWorldSettingsRequest) ProtoMessage() {}

func (x *UpdatePalWorldSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePalWorldSettingsRequest.ProtoReflect.Descriptor instead.
func (*UpdatePalWorldSettingsRequest) Descriptor() ([]byte, []int) {
	return file_settings_proto_rawDescGZIP(), []int{3}
}

func (x *UpdatePalWorldSettingsRequest) GetSettings() *PalWorldSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *UpdatePalWorldSettingsRequest) GetUpdatePaths() []string {
	if x != nil {
		return x.UpdatePaths
	}
	return nil
}

type UpdatePalWorldSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *PalWorldSettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *UpdatePalWorldSettingsResponse) Reset() {
	*x = UpdatePalWorldSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePalWorldSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePalWorldSettingsResponse) ProtoMessage() {}

func (x *UpdatePalWorldSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePalWorldSettingsResponse.ProtoReflect.Descriptor instead.
func (*UpdatePalWorldSettingsResponse) Descriptor() ([]byte, []int) {
	return file_settings_proto_rawDescGZIP(), []int{4}
}

func (x *UpdatePalWorldSettingsResponse) GetSettings() *PalWorldSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

type ResetPalWorldSettingsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetPalWorldSettingsRequest) Reset() {
	*x = ResetPalWorldSettingsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPalWorldSettingsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPalWorldSettingsRequest) ProtoMessage() {}

func (x *ResetPalWorldSettingsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_settings_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPalWorldSettingsRequest.ProtoReflect.Descriptor instead.
func (*ResetPalWorldSettingsRequest) Descriptor() ([]byte, []int) {
	return file_settings_proto_rawDescGZIP(), []int{5}
}

type ResetPalWorldSettingsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Settings *PalWorldSettings `protobuf:"bytes,1,opt,name=settings,proto3" json:"settings,omitempty"`
}

func (x *ResetPalWorldSettingsResponse) Reset() {
	*x = ResetPalWorldSettingsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_settings_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPalWorldSettingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPalWorldSettingsResponse) ProtoMessage() {}

func (x *ResetPalWorldSettingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_settings_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPalWorldSettingsResponse.ProtoReflect.Descriptor instead.
func (*ResetPalWorldSettingsResponse) Descriptor() ([]byte, []int) {
	return file_settings_proto_rawDescGZIP(), []int{6}
}

func (x *ResetPalWorldSettingsResponse) GetSettings() *PalWorldSettings {
	if x != nil {
		return x.Settings
	}
	return nil
}

var File_settings_proto protoreflect.FileDescriptor

var file_settings_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x22, 0xb5, 0x19, 0x0a, 0x10,
	0x50, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c, 0x74, 0x79,
	0x12, 0x2d, 0x0a, 0x13, 0x64, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70, 0x65,
	0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x64,
	0x61, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x31, 0x0a, 0x15, 0x6e, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x70,
	0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12,
	0x6e, 0x69, 0x67, 0x68, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x65, 0x78, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a,
	0x10, 0x70, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x70, 0x61, 0x6c, 0x43, 0x61, 0x70, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x70, 0x61, 0x6c, 0x5f, 0x73,
	0x70, 0x61, 0x77, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0f, 0x70, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x77, 0x6e, 0x4e, 0x75, 0x6d,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x70, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x70, 0x61, 0x6c, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x35, 0x0a, 0x17, 0x70, 0x61, 0x6c,
	0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x66,
	0x65, 0x6e, 0x73, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x14, 0x70, 0x61, 0x6c, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x19, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x16, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x41, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x3b, 0x0a, 0x1a, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x17, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x73, 0x74, 0x6f, 0x6d, 0x61, 0x63, 0x68, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65,
	0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19,
	0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x6d, 0x61, 0x63, 0x68, 0x44, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x3f, 0x0a, 0x1c, 0x70, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x64, 0x65, 0x63, 0x72,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x19, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x44, 0x65,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x19, 0x70, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x68, 0x70, 0x5f, 0x72, 0x65, 0x67,
	0x65, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x70, 0x52, 0x65, 0x67, 0x65, 0x6e,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x48, 0x0a, 0x22, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x61,
	0x75, 0x74, 0x6f, 0x5f, 0x68, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x1c, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x70, 0x52, 0x65,
	0x67, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x39,
	0x0a, 0x19, 0x70, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x6f, 0x6d, 0x61, 0x63, 0x68, 0x5f, 0x64, 0x65,
	0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x16, 0x70, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x6d, 0x61, 0x63, 0x68, 0x44, 0x65, 0x63,
	0x72, 0x65, 0x61, 0x73, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x70, 0x61, 0x6c,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x5f, 0x64, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x70, 0x61,
	0x6c, 0x53, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x44, 0x65, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x16, 0x70, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x6f,
	0x5f, 0x68, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x70, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x70, 0x52,
	0x65, 0x67, 0x65, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x1f, 0x70, 0x61, 0x6c, 0x5f,
	0x61, 0x75, 0x74, 0x6f, 0x5f, 0x68, 0x70, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x6e, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x73, 0x6c, 0x65, 0x65, 0x70, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x19, 0x70, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x6f, 0x48, 0x70, 0x52, 0x65, 0x67, 0x65,
	0x6e, 0x52, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x53, 0x6c, 0x65, 0x65, 0x70, 0x12, 0x37, 0x0a, 0x18,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x44, 0x61, 0x6d, 0x61, 0x67,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x52, 0x0a, 0x26, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x22, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x44, 0x65, 0x74, 0x65, 0x72, 0x69, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x61, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x72, 0x6f, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x39, 0x0a, 0x19, 0x63,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x68, 0x70, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x48, 0x70, 0x52, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x24, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x70,
	0x61, 0x77, 0x6e, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x20, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x61, 0x77, 0x6e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x5f,
	0x64, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x65, 0x6e, 0x65, 0x6d, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x49,
	0x74, 0x65, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x61, 0x74, 0x68,
	0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x65, 0x61, 0x74, 0x68, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x45, 0x0a, 0x20,
	0x62, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x54, 0x6f, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x44, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f,
	0x66, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x6c, 0x79, 0x5f, 0x66, 0x69, 0x72, 0x65, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x69, 0x65,
	0x6e, 0x64, 0x6c, 0x79, 0x46, 0x69, 0x72, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x62, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x6e, 0x76, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x65, 0x6e, 0x65,
	0x6d, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x6e, 0x76, 0x61, 0x64, 0x65, 0x72, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x12, 0x22, 0x0a,
	0x0d, 0x62, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6f, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x62, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x55, 0x6e, 0x6b,
	0x6f, 0x12, 0x34, 0x0a, 0x17, 0x62, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x61, 0x69,
	0x6d, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x64, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x69, 0x6d, 0x41, 0x73,
	0x73, 0x69, 0x73, 0x74, 0x50, 0x61, 0x64, 0x12, 0x3e, 0x0a, 0x1c, 0x62, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x61, 0x69, 0x6d, 0x5f, 0x61, 0x73, 0x73, 0x69, 0x73, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x62,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x69, 0x6d, 0x41, 0x73, 0x73, 0x69, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x11, 0x64, 0x72, 0x6f, 0x70, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0e, 0x64, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x78, 0x4e,
	0x75, 0x6d, 0x12, 0x32, 0x0a, 0x16, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x75, 0x6e, 0x6b, 0x6f, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x12, 0x64, 0x72, 0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x78, 0x4e,
	0x75, 0x6d, 0x55, 0x6e, 0x6b, 0x6f, 0x12, 0x29, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63,
	0x61, 0x6d, 0x70, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0e, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x4d, 0x61, 0x78, 0x4e, 0x75,
	0x6d, 0x12, 0x36, 0x0a, 0x18, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x63, 0x61, 0x6d, 0x70, 0x5f, 0x77,
	0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x14, 0x62, 0x61, 0x73, 0x65, 0x43, 0x61, 0x6d, 0x70, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x38, 0x0a, 0x19, 0x64, 0x72, 0x6f,
	0x70, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x78,
	0x5f, 0x68, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x64, 0x72,
	0x6f, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x78, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x12, 0x4c, 0x0a, 0x24, 0x62, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65,
	0x73, 0x65, 0x74, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x1e, 0x62, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x4e, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x73, 0x12, 0x52, 0x0a, 0x27, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x5f, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x21, 0x61, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x73, 0x12, 0x2f, 0x0a, 0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x18, 0x27, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x11, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72,
	0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x40, 0x0a, 0x1d, 0x70, 0x61, 0x6c, 0x5f, 0x65, 0x67,
	0x67, 0x5f, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x68, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x70,
	0x61, 0x6c, 0x45, 0x67, 0x67, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x48, 0x61, 0x74, 0x63,
	0x68, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x77, 0x6f, 0x72, 0x6b,
	0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x62, 0x5f, 0x69, 0x73, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c,
	0x61, 0x79, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x62, 0x49, 0x73, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x18, 0x0a, 0x08, 0x62, 0x5f, 0x69, 0x73, 0x5f, 0x70,
	0x76, 0x70, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x62, 0x49, 0x73, 0x50, 0x76, 0x70,
	0x12, 0x59, 0x0a, 0x2b, 0x62, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x70, 0x69, 0x63, 0x6b, 0x75, 0x70,
	0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x65, 0x61,
	0x74, 0x68, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18,
	0x2c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x24, 0x62, 0x43, 0x61, 0x6e, 0x50, 0x69, 0x63, 0x6b, 0x75,
	0x70, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x61, 0x74, 0x68,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x3a, 0x0a, 0x1a, 0x62,
	0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69,
	0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x16, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x12, 0x2f, 0x0a, 0x14, 0x62, 0x5f, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x66, 0x61, 0x73, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x62, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x61,
	0x73, 0x74, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x12, 0x46, 0x0a, 0x21, 0x62, 0x5f, 0x69, 0x73,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x62, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x1b, 0x62, 0x49, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x79, 0x4d, 0x61, 0x70,
	0x12, 0x3c, 0x0a, 0x1b, 0x62, 0x5f, 0x65, 0x78, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x61, 0x79,
	0x65, 0x72, 0x5f, 0x61, 0x66, 0x74, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x62, 0x45, 0x78, 0x69, 0x73, 0x74, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x72, 0x41, 0x66, 0x74, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x6f, 0x75, 0x74, 0x12, 0x4b,
	0x0a, 0x23, 0x62, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x65, 0x6e,
	0x73, 0x65, 0x5f, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x70,
	0x6c, 0x61, 0x79, 0x65, 0x72, 0x18, 0x31, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x62, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x44, 0x65, 0x66, 0x65, 0x6e, 0x73, 0x65, 0x4f, 0x74, 0x68, 0x65, 0x72,
	0x47, 0x75, 0x69, 0x6c, 0x64, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x13, 0x63,
	0x6f, 0x6f, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x32, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6f, 0x70, 0x50, 0x6c,
	0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x31, 0x0a, 0x15, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x78, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x33, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x12, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x38, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x69, 0x70, 0x18, 0x39, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x70, 0x12, 0x21, 0x0a, 0x0c, 0x72,
	0x63, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x72, 0x63, 0x6f, 0x6e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x3b, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x63, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x12, 0x1c, 0x0a, 0x0a, 0x62, 0x5f, 0x75, 0x73, 0x65, 0x5f, 0x61, 0x75, 0x74,
	0x68, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x62, 0x55, 0x73, 0x65, 0x41, 0x75, 0x74,
	0x68, 0x12, 0x20, 0x0a, 0x0c, 0x62, 0x61, 0x6e, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x72, 0x6c, 0x22, 0x1c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x56, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64,
	0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x7b, 0x0a, 0x1d, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c,
	0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x74, 0x68, 0x73, 0x22, 0x59, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74,
	0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53,
	0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x58, 0x0a, 0x1d, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x6c, 0x57, 0x6f, 0x72,
	0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x6c, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67,
	0x73, 0x52, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x42, 0x37, 0x5a, 0x35, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x77, 0x6d, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x70, 0x69, 0x6c, 0x65, 0x64, 0x2f, 0x67, 0x6f,
	0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_settings_proto_rawDescOnce sync.Once
	file_settings_proto_rawDescData = file_settings_proto_rawDesc
)

func file_settings_proto_rawDescGZIP() []byte {
	file_settings_proto_rawDescOnce.Do(func() {
		file_settings_proto_rawDescData = protoimpl.X.CompressGZIP(file_settings_proto_rawDescData)
	})
	return file_settings_proto_rawDescData
}

var file_settings_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_settings_proto_goTypes = []interface{}{
	(*PalWorldSettings)(nil),               // 0: config.v1.PalWorldSettings
	(*GetPalWorldSettingsRequest)(nil),     // 1: config.v1.GetPalWorldSettingsRequest
	(*GetPalWorldSettingsResponse)(nil),    // 2: config.v1.GetPalWorldSettingsResponse
	(*UpdatePalWorldSettingsRequest)(nil),  // 3: config.v1.UpdatePalWorldSettingsRequest
	(*UpdatePalWorldSettingsResponse)(nil), // 4: config.v1.UpdatePalWorldSettingsResponse
	(*ResetPalWorldSettingsRequest)(nil),   // 5: config.v1.ResetPalWorldSettingsRequest
	(*ResetPalWorldSettingsResponse)(nil),  // 6: config.v1.ResetPalWorldSettingsResponse
}
var file_settings_proto_depIdxs = []int32{
	0, // 0: config.v1.GetPalWorldSettingsResponse.settings:type_name -> config.v1.PalWorldSettings
	0, // 1: config.v1.UpdatePalWorldSettingsRequest.settings:type_name -> config.v1.PalWorldSettings
	0, // 2: config.v1.UpdatePalWorldSettingsResponse.settings:type_name -> config.v1.PalWorldSettings
	0, // 3: config.v1.ResetPalWorldSettingsResponse.settings:type_name -> config.v1.PalWorldSettings
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_settings_proto_init() }
func file_settings_proto_init() {
	if File_settings_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_settings_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PalWorldSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPalWorldSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPalWorldSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePalWorldSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePalWorldSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPalWorldSettingsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_settings_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPalWorldSettingsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_settings_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_settings_proto_goTypes,
		DependencyIndexes: file_settings_proto_depIdxs,
		MessageInfos:      file_settings_proto_msgTypes,
	}.Build()
	File_settings_proto = out.File
	file_settings_proto_rawDesc = nil
	file_settings_proto_goTypes = nil
	file_settings_proto_depIdxs = nil
}
