// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "settings.proto" (package "config.v1", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message config.v1.PalWorldSettings
 */
export interface PalWorldSettings {
    /**
     * @generated from protobuf field: string difficulty = 1;
     */
    difficulty: string;
    /**
     * @generated from protobuf field: float day_time_speed_rate = 2;
     */
    dayTimeSpeedRate: number;
    /**
     * @generated from protobuf field: float night_time_speed_rate = 3;
     */
    nightTimeSpeedRate: number;
    /**
     * @generated from protobuf field: float exp_rate = 4;
     */
    expRate: number;
    /**
     * @generated from protobuf field: float pal_capture_rate = 5;
     */
    palCaptureRate: number;
    /**
     * @generated from protobuf field: float pal_spawn_num_rate = 6;
     */
    palSpawnNumRate: number;
    /**
     * @generated from protobuf field: float pal_damage_rate_attack = 7;
     */
    palDamageRateAttack: number;
    /**
     * @generated from protobuf field: float pal_damage_rate_defense = 8;
     */
    palDamageRateDefense: number;
    /**
     * @generated from protobuf field: float player_damage_rate_attack = 9;
     */
    playerDamageRateAttack: number;
    /**
     * @generated from protobuf field: float player_damage_rate_defense = 10;
     */
    playerDamageRateDefense: number;
    /**
     * @generated from protobuf field: float player_stomach_decrease_rate = 11;
     */
    playerStomachDecreaseRate: number;
    /**
     * @generated from protobuf field: float player_stamina_decrease_rate = 12;
     */
    playerStaminaDecreaseRate: number;
    /**
     * @generated from protobuf field: float player_auto_hp_regen_rate = 13;
     */
    playerAutoHpRegenRate: number;
    /**
     * @generated from protobuf field: float player_auto_hp_regen_rate_in_sleep = 14;
     */
    playerAutoHpRegenRateInSleep: number;
    /**
     * @generated from protobuf field: float pal_stomach_decrease_rate = 15;
     */
    palStomachDecreaseRate: number;
    /**
     * @generated from protobuf field: float pal_stamina_decrease_rate = 16;
     */
    palStaminaDecreaseRate: number;
    /**
     * @generated from protobuf field: float pal_auto_hp_regen_rate = 17;
     */
    palAutoHpRegenRate: number;
    /**
     * @generated from protobuf field: float pal_auto_hp_regen_rate_in_sleep = 18;
     */
    palAutoHpRegenRateInSleep: number;
    /**
     * @generated from protobuf field: float build_object_damage_rate = 19;
     */
    buildObjectDamageRate: number;
    /**
     * @generated from protobuf field: float build_object_deterioration_damage_rate = 20;
     */
    buildObjectDeteriorationDamageRate: number;
    /**
     * @generated from protobuf field: float collection_drop_rate = 21;
     */
    collectionDropRate: number;
    /**
     * @generated from protobuf field: float collection_object_hp_rate = 22;
     */
    collectionObjectHpRate: number;
    /**
     * @generated from protobuf field: float collection_object_respawn_speed_rate = 23;
     */
    collectionObjectRespawnSpeedRate: number;
    /**
     * @generated from protobuf field: float enemy_drop_item_rate = 24;
     */
    enemyDropItemRate: number;
    /**
     * @generated from protobuf field: string death_penalty = 25;
     */
    deathPenalty: string;
    /**
     * @generated from protobuf field: bool b_enable_player_to_player_damage = 26;
     */
    bEnablePlayerToPlayerDamage: boolean;
    /**
     * @generated from protobuf field: bool b_enable_friendly_fire = 27;
     */
    bEnableFriendlyFire: boolean;
    /**
     * @generated from protobuf field: bool b_enable_invader_enemy = 28;
     */
    bEnableInvaderEnemy: boolean;
    /**
     * @generated from protobuf field: bool b_active_unko = 29;
     */
    bActiveUnko: boolean;
    /**
     * @generated from protobuf field: bool b_enable_aim_assist_pad = 30;
     */
    bEnableAimAssistPad: boolean;
    /**
     * @generated from protobuf field: bool b_enable_aim_assist_keyboard = 31;
     */
    bEnableAimAssistKeyboard: boolean;
    /**
     * @generated from protobuf field: int32 drop_item_max_num = 32;
     */
    dropItemMaxNum: number;
    /**
     * @generated from protobuf field: int32 drop_item_max_num_unko = 33;
     */
    dropItemMaxNumUnko: number;
    /**
     * @generated from protobuf field: int32 base_camp_max_num = 34;
     */
    baseCampMaxNum: number;
    /**
     * @generated from protobuf field: int32 base_camp_worker_max_num = 35;
     */
    baseCampWorkerMaxNum: number;
    /**
     * @generated from protobuf field: float drop_item_alive_max_hours = 36;
     */
    dropItemAliveMaxHours: number;
    /**
     * @generated from protobuf field: bool b_auto_reset_guild_no_online_players = 37;
     */
    bAutoResetGuildNoOnlinePlayers: boolean;
    /**
     * @generated from protobuf field: float auto_reset_guild_time_no_online_players = 38;
     */
    autoResetGuildTimeNoOnlinePlayers: number;
    /**
     * @generated from protobuf field: int32 guild_player_max_num = 39;
     */
    guildPlayerMaxNum: number;
    /**
     * @generated from protobuf field: float pal_egg_default_hatching_time = 40;
     */
    palEggDefaultHatchingTime: number;
    /**
     * @generated from protobuf field: float work_speed_rate = 41;
     */
    workSpeedRate: number;
    /**
     * @generated from protobuf field: bool b_is_multiplay = 42;
     */
    bIsMultiplay: boolean;
    /**
     * @generated from protobuf field: bool b_is_pvp = 43;
     */
    bIsPvp: boolean;
    /**
     * @generated from protobuf field: bool b_can_pickup_other_guild_death_penalty_drop = 44;
     */
    bCanPickupOtherGuildDeathPenaltyDrop: boolean;
    /**
     * @generated from protobuf field: bool b_enable_non_login_penalty = 45;
     */
    bEnableNonLoginPenalty: boolean;
    /**
     * @generated from protobuf field: bool b_enable_fast_travel = 46;
     */
    bEnableFastTravel: boolean;
    /**
     * @generated from protobuf field: bool b_is_start_location_select_by_map = 47;
     */
    bIsStartLocationSelectByMap: boolean;
    /**
     * @generated from protobuf field: bool b_exist_player_after_logout = 48;
     */
    bExistPlayerAfterLogout: boolean;
    /**
     * @generated from protobuf field: bool b_enable_defense_other_guild_player = 49;
     */
    bEnableDefenseOtherGuildPlayer: boolean;
    /**
     * @generated from protobuf field: int32 coop_player_max_num = 50;
     */
    coopPlayerMaxNum: number;
    /**
     * @generated from protobuf field: int32 server_player_max_num = 51;
     */
    serverPlayerMaxNum: number;
    /**
     * @generated from protobuf field: string server_name = 52;
     */
    serverName: string;
    /**
     * @generated from protobuf field: string server_description = 53;
     */
    serverDescription: string;
    /**
     * @generated from protobuf field: string admin_password = 54;
     */
    adminPassword: string;
    /**
     * @generated from protobuf field: string server_password = 55;
     */
    serverPassword: string;
    /**
     * @generated from protobuf field: int32 public_port = 56;
     */
    publicPort: number;
    /**
     * @generated from protobuf field: string public_ip = 57;
     */
    publicIp: string;
    /**
     * @generated from protobuf field: bool rcon_enabled = 58;
     */
    rconEnabled: boolean;
    /**
     * @generated from protobuf field: int32 rcon_port = 59;
     */
    rconPort: number;
    /**
     * @generated from protobuf field: string region = 60;
     */
    region: string;
    /**
     * @generated from protobuf field: bool b_use_auth = 61;
     */
    bUseAuth: boolean;
    /**
     * @generated from protobuf field: string ban_list_url = 62;
     */
    banListUrl: string;
}
/**
 * @generated from protobuf message config.v1.GetPalWorldSettingsRequest
 */
export interface GetPalWorldSettingsRequest {
}
/**
 * @generated from protobuf message config.v1.GetPalWorldSettingsResponse
 */
export interface GetPalWorldSettingsResponse {
    /**
     * @generated from protobuf field: config.v1.PalWorldSettings settings = 1;
     */
    settings?: PalWorldSettings;
}
/**
 * @generated from protobuf message config.v1.UpdatePalWorldSettingsRequest
 */
export interface UpdatePalWorldSettingsRequest {
    /**
     * @generated from protobuf field: config.v1.PalWorldSettings settings = 1;
     */
    settings?: PalWorldSettings;
    /**
     * @generated from protobuf field: repeated string update_paths = 2;
     */
    updatePaths: string[];
}
/**
 * @generated from protobuf message config.v1.UpdatePalWorldSettingsResponse
 */
export interface UpdatePalWorldSettingsResponse {
    /**
     * @generated from protobuf field: config.v1.PalWorldSettings settings = 1;
     */
    settings?: PalWorldSettings;
}
/**
 * @generated from protobuf message config.v1.ResetPalWorldSettingsRequest
 */
export interface ResetPalWorldSettingsRequest {
}
/**
 * @generated from protobuf message config.v1.ResetPalWorldSettingsResponse
 */
export interface ResetPalWorldSettingsResponse {
    /**
     * @generated from protobuf field: config.v1.PalWorldSettings settings = 1;
     */
    settings?: PalWorldSettings;
}
// @generated message type with reflection information, may provide speed optimized methods
class PalWorldSettings$Type extends MessageType<PalWorldSettings> {
    constructor() {
        super("config.v1.PalWorldSettings", [
            { no: 1, name: "difficulty", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "day_time_speed_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "night_time_speed_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "exp_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 5, name: "pal_capture_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "pal_spawn_num_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 7, name: "pal_damage_rate_attack", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 8, name: "pal_damage_rate_defense", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "player_damage_rate_attack", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 10, name: "player_damage_rate_defense", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 11, name: "player_stomach_decrease_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 12, name: "player_stamina_decrease_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 13, name: "player_auto_hp_regen_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 14, name: "player_auto_hp_regen_rate_in_sleep", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 15, name: "pal_stomach_decrease_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 16, name: "pal_stamina_decrease_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 17, name: "pal_auto_hp_regen_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 18, name: "pal_auto_hp_regen_rate_in_sleep", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 19, name: "build_object_damage_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 20, name: "build_object_deterioration_damage_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 21, name: "collection_drop_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 22, name: "collection_object_hp_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 23, name: "collection_object_respawn_speed_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 24, name: "enemy_drop_item_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 25, name: "death_penalty", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 26, name: "b_enable_player_to_player_damage", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 27, name: "b_enable_friendly_fire", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 28, name: "b_enable_invader_enemy", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 29, name: "b_active_unko", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 30, name: "b_enable_aim_assist_pad", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 31, name: "b_enable_aim_assist_keyboard", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 32, name: "drop_item_max_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 33, name: "drop_item_max_num_unko", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 34, name: "base_camp_max_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 35, name: "base_camp_worker_max_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 36, name: "drop_item_alive_max_hours", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 37, name: "b_auto_reset_guild_no_online_players", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 38, name: "auto_reset_guild_time_no_online_players", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 39, name: "guild_player_max_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 40, name: "pal_egg_default_hatching_time", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 41, name: "work_speed_rate", kind: "scalar", T: 2 /*ScalarType.FLOAT*/ },
            { no: 42, name: "b_is_multiplay", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 43, name: "b_is_pvp", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 44, name: "b_can_pickup_other_guild_death_penalty_drop", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 45, name: "b_enable_non_login_penalty", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 46, name: "b_enable_fast_travel", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 47, name: "b_is_start_location_select_by_map", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 48, name: "b_exist_player_after_logout", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 49, name: "b_enable_defense_other_guild_player", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 50, name: "coop_player_max_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 51, name: "server_player_max_num", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 52, name: "server_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 53, name: "server_description", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 54, name: "admin_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 55, name: "server_password", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 56, name: "public_port", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 57, name: "public_ip", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 58, name: "rcon_enabled", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 59, name: "rcon_port", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 60, name: "region", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 61, name: "b_use_auth", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 62, name: "ban_list_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PalWorldSettings>): PalWorldSettings {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.difficulty = "";
        message.dayTimeSpeedRate = 0;
        message.nightTimeSpeedRate = 0;
        message.expRate = 0;
        message.palCaptureRate = 0;
        message.palSpawnNumRate = 0;
        message.palDamageRateAttack = 0;
        message.palDamageRateDefense = 0;
        message.playerDamageRateAttack = 0;
        message.playerDamageRateDefense = 0;
        message.playerStomachDecreaseRate = 0;
        message.playerStaminaDecreaseRate = 0;
        message.playerAutoHpRegenRate = 0;
        message.playerAutoHpRegenRateInSleep = 0;
        message.palStomachDecreaseRate = 0;
        message.palStaminaDecreaseRate = 0;
        message.palAutoHpRegenRate = 0;
        message.palAutoHpRegenRateInSleep = 0;
        message.buildObjectDamageRate = 0;
        message.buildObjectDeteriorationDamageRate = 0;
        message.collectionDropRate = 0;
        message.collectionObjectHpRate = 0;
        message.collectionObjectRespawnSpeedRate = 0;
        message.enemyDropItemRate = 0;
        message.deathPenalty = "";
        message.bEnablePlayerToPlayerDamage = false;
        message.bEnableFriendlyFire = false;
        message.bEnableInvaderEnemy = false;
        message.bActiveUnko = false;
        message.bEnableAimAssistPad = false;
        message.bEnableAimAssistKeyboard = false;
        message.dropItemMaxNum = 0;
        message.dropItemMaxNumUnko = 0;
        message.baseCampMaxNum = 0;
        message.baseCampWorkerMaxNum = 0;
        message.dropItemAliveMaxHours = 0;
        message.bAutoResetGuildNoOnlinePlayers = false;
        message.autoResetGuildTimeNoOnlinePlayers = 0;
        message.guildPlayerMaxNum = 0;
        message.palEggDefaultHatchingTime = 0;
        message.workSpeedRate = 0;
        message.bIsMultiplay = false;
        message.bIsPvp = false;
        message.bCanPickupOtherGuildDeathPenaltyDrop = false;
        message.bEnableNonLoginPenalty = false;
        message.bEnableFastTravel = false;
        message.bIsStartLocationSelectByMap = false;
        message.bExistPlayerAfterLogout = false;
        message.bEnableDefenseOtherGuildPlayer = false;
        message.coopPlayerMaxNum = 0;
        message.serverPlayerMaxNum = 0;
        message.serverName = "";
        message.serverDescription = "";
        message.adminPassword = "";
        message.serverPassword = "";
        message.publicPort = 0;
        message.publicIp = "";
        message.rconEnabled = false;
        message.rconPort = 0;
        message.region = "";
        message.bUseAuth = false;
        message.banListUrl = "";
        if (value !== undefined)
            reflectionMergePartial<PalWorldSettings>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PalWorldSettings): PalWorldSettings {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string difficulty */ 1:
                    message.difficulty = reader.string();
                    break;
                case /* float day_time_speed_rate */ 2:
                    message.dayTimeSpeedRate = reader.float();
                    break;
                case /* float night_time_speed_rate */ 3:
                    message.nightTimeSpeedRate = reader.float();
                    break;
                case /* float exp_rate */ 4:
                    message.expRate = reader.float();
                    break;
                case /* float pal_capture_rate */ 5:
                    message.palCaptureRate = reader.float();
                    break;
                case /* float pal_spawn_num_rate */ 6:
                    message.palSpawnNumRate = reader.float();
                    break;
                case /* float pal_damage_rate_attack */ 7:
                    message.palDamageRateAttack = reader.float();
                    break;
                case /* float pal_damage_rate_defense */ 8:
                    message.palDamageRateDefense = reader.float();
                    break;
                case /* float player_damage_rate_attack */ 9:
                    message.playerDamageRateAttack = reader.float();
                    break;
                case /* float player_damage_rate_defense */ 10:
                    message.playerDamageRateDefense = reader.float();
                    break;
                case /* float player_stomach_decrease_rate */ 11:
                    message.playerStomachDecreaseRate = reader.float();
                    break;
                case /* float player_stamina_decrease_rate */ 12:
                    message.playerStaminaDecreaseRate = reader.float();
                    break;
                case /* float player_auto_hp_regen_rate */ 13:
                    message.playerAutoHpRegenRate = reader.float();
                    break;
                case /* float player_auto_hp_regen_rate_in_sleep */ 14:
                    message.playerAutoHpRegenRateInSleep = reader.float();
                    break;
                case /* float pal_stomach_decrease_rate */ 15:
                    message.palStomachDecreaseRate = reader.float();
                    break;
                case /* float pal_stamina_decrease_rate */ 16:
                    message.palStaminaDecreaseRate = reader.float();
                    break;
                case /* float pal_auto_hp_regen_rate */ 17:
                    message.palAutoHpRegenRate = reader.float();
                    break;
                case /* float pal_auto_hp_regen_rate_in_sleep */ 18:
                    message.palAutoHpRegenRateInSleep = reader.float();
                    break;
                case /* float build_object_damage_rate */ 19:
                    message.buildObjectDamageRate = reader.float();
                    break;
                case /* float build_object_deterioration_damage_rate */ 20:
                    message.buildObjectDeteriorationDamageRate = reader.float();
                    break;
                case /* float collection_drop_rate */ 21:
                    message.collectionDropRate = reader.float();
                    break;
                case /* float collection_object_hp_rate */ 22:
                    message.collectionObjectHpRate = reader.float();
                    break;
                case /* float collection_object_respawn_speed_rate */ 23:
                    message.collectionObjectRespawnSpeedRate = reader.float();
                    break;
                case /* float enemy_drop_item_rate */ 24:
                    message.enemyDropItemRate = reader.float();
                    break;
                case /* string death_penalty */ 25:
                    message.deathPenalty = reader.string();
                    break;
                case /* bool b_enable_player_to_player_damage */ 26:
                    message.bEnablePlayerToPlayerDamage = reader.bool();
                    break;
                case /* bool b_enable_friendly_fire */ 27:
                    message.bEnableFriendlyFire = reader.bool();
                    break;
                case /* bool b_enable_invader_enemy */ 28:
                    message.bEnableInvaderEnemy = reader.bool();
                    break;
                case /* bool b_active_unko */ 29:
                    message.bActiveUnko = reader.bool();
                    break;
                case /* bool b_enable_aim_assist_pad */ 30:
                    message.bEnableAimAssistPad = reader.bool();
                    break;
                case /* bool b_enable_aim_assist_keyboard */ 31:
                    message.bEnableAimAssistKeyboard = reader.bool();
                    break;
                case /* int32 drop_item_max_num */ 32:
                    message.dropItemMaxNum = reader.int32();
                    break;
                case /* int32 drop_item_max_num_unko */ 33:
                    message.dropItemMaxNumUnko = reader.int32();
                    break;
                case /* int32 base_camp_max_num */ 34:
                    message.baseCampMaxNum = reader.int32();
                    break;
                case /* int32 base_camp_worker_max_num */ 35:
                    message.baseCampWorkerMaxNum = reader.int32();
                    break;
                case /* float drop_item_alive_max_hours */ 36:
                    message.dropItemAliveMaxHours = reader.float();
                    break;
                case /* bool b_auto_reset_guild_no_online_players */ 37:
                    message.bAutoResetGuildNoOnlinePlayers = reader.bool();
                    break;
                case /* float auto_reset_guild_time_no_online_players */ 38:
                    message.autoResetGuildTimeNoOnlinePlayers = reader.float();
                    break;
                case /* int32 guild_player_max_num */ 39:
                    message.guildPlayerMaxNum = reader.int32();
                    break;
                case /* float pal_egg_default_hatching_time */ 40:
                    message.palEggDefaultHatchingTime = reader.float();
                    break;
                case /* float work_speed_rate */ 41:
                    message.workSpeedRate = reader.float();
                    break;
                case /* bool b_is_multiplay */ 42:
                    message.bIsMultiplay = reader.bool();
                    break;
                case /* bool b_is_pvp */ 43:
                    message.bIsPvp = reader.bool();
                    break;
                case /* bool b_can_pickup_other_guild_death_penalty_drop */ 44:
                    message.bCanPickupOtherGuildDeathPenaltyDrop = reader.bool();
                    break;
                case /* bool b_enable_non_login_penalty */ 45:
                    message.bEnableNonLoginPenalty = reader.bool();
                    break;
                case /* bool b_enable_fast_travel */ 46:
                    message.bEnableFastTravel = reader.bool();
                    break;
                case /* bool b_is_start_location_select_by_map */ 47:
                    message.bIsStartLocationSelectByMap = reader.bool();
                    break;
                case /* bool b_exist_player_after_logout */ 48:
                    message.bExistPlayerAfterLogout = reader.bool();
                    break;
                case /* bool b_enable_defense_other_guild_player */ 49:
                    message.bEnableDefenseOtherGuildPlayer = reader.bool();
                    break;
                case /* int32 coop_player_max_num */ 50:
                    message.coopPlayerMaxNum = reader.int32();
                    break;
                case /* int32 server_player_max_num */ 51:
                    message.serverPlayerMaxNum = reader.int32();
                    break;
                case /* string server_name */ 52:
                    message.serverName = reader.string();
                    break;
                case /* string server_description */ 53:
                    message.serverDescription = reader.string();
                    break;
                case /* string admin_password */ 54:
                    message.adminPassword = reader.string();
                    break;
                case /* string server_password */ 55:
                    message.serverPassword = reader.string();
                    break;
                case /* int32 public_port */ 56:
                    message.publicPort = reader.int32();
                    break;
                case /* string public_ip */ 57:
                    message.publicIp = reader.string();
                    break;
                case /* bool rcon_enabled */ 58:
                    message.rconEnabled = reader.bool();
                    break;
                case /* int32 rcon_port */ 59:
                    message.rconPort = reader.int32();
                    break;
                case /* string region */ 60:
                    message.region = reader.string();
                    break;
                case /* bool b_use_auth */ 61:
                    message.bUseAuth = reader.bool();
                    break;
                case /* string ban_list_url */ 62:
                    message.banListUrl = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PalWorldSettings, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string difficulty = 1; */
        if (message.difficulty !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.difficulty);
        /* float day_time_speed_rate = 2; */
        if (message.dayTimeSpeedRate !== 0)
            writer.tag(2, WireType.Bit32).float(message.dayTimeSpeedRate);
        /* float night_time_speed_rate = 3; */
        if (message.nightTimeSpeedRate !== 0)
            writer.tag(3, WireType.Bit32).float(message.nightTimeSpeedRate);
        /* float exp_rate = 4; */
        if (message.expRate !== 0)
            writer.tag(4, WireType.Bit32).float(message.expRate);
        /* float pal_capture_rate = 5; */
        if (message.palCaptureRate !== 0)
            writer.tag(5, WireType.Bit32).float(message.palCaptureRate);
        /* float pal_spawn_num_rate = 6; */
        if (message.palSpawnNumRate !== 0)
            writer.tag(6, WireType.Bit32).float(message.palSpawnNumRate);
        /* float pal_damage_rate_attack = 7; */
        if (message.palDamageRateAttack !== 0)
            writer.tag(7, WireType.Bit32).float(message.palDamageRateAttack);
        /* float pal_damage_rate_defense = 8; */
        if (message.palDamageRateDefense !== 0)
            writer.tag(8, WireType.Bit32).float(message.palDamageRateDefense);
        /* float player_damage_rate_attack = 9; */
        if (message.playerDamageRateAttack !== 0)
            writer.tag(9, WireType.Bit32).float(message.playerDamageRateAttack);
        /* float player_damage_rate_defense = 10; */
        if (message.playerDamageRateDefense !== 0)
            writer.tag(10, WireType.Bit32).float(message.playerDamageRateDefense);
        /* float player_stomach_decrease_rate = 11; */
        if (message.playerStomachDecreaseRate !== 0)
            writer.tag(11, WireType.Bit32).float(message.playerStomachDecreaseRate);
        /* float player_stamina_decrease_rate = 12; */
        if (message.playerStaminaDecreaseRate !== 0)
            writer.tag(12, WireType.Bit32).float(message.playerStaminaDecreaseRate);
        /* float player_auto_hp_regen_rate = 13; */
        if (message.playerAutoHpRegenRate !== 0)
            writer.tag(13, WireType.Bit32).float(message.playerAutoHpRegenRate);
        /* float player_auto_hp_regen_rate_in_sleep = 14; */
        if (message.playerAutoHpRegenRateInSleep !== 0)
            writer.tag(14, WireType.Bit32).float(message.playerAutoHpRegenRateInSleep);
        /* float pal_stomach_decrease_rate = 15; */
        if (message.palStomachDecreaseRate !== 0)
            writer.tag(15, WireType.Bit32).float(message.palStomachDecreaseRate);
        /* float pal_stamina_decrease_rate = 16; */
        if (message.palStaminaDecreaseRate !== 0)
            writer.tag(16, WireType.Bit32).float(message.palStaminaDecreaseRate);
        /* float pal_auto_hp_regen_rate = 17; */
        if (message.palAutoHpRegenRate !== 0)
            writer.tag(17, WireType.Bit32).float(message.palAutoHpRegenRate);
        /* float pal_auto_hp_regen_rate_in_sleep = 18; */
        if (message.palAutoHpRegenRateInSleep !== 0)
            writer.tag(18, WireType.Bit32).float(message.palAutoHpRegenRateInSleep);
        /* float build_object_damage_rate = 19; */
        if (message.buildObjectDamageRate !== 0)
            writer.tag(19, WireType.Bit32).float(message.buildObjectDamageRate);
        /* float build_object_deterioration_damage_rate = 20; */
        if (message.buildObjectDeteriorationDamageRate !== 0)
            writer.tag(20, WireType.Bit32).float(message.buildObjectDeteriorationDamageRate);
        /* float collection_drop_rate = 21; */
        if (message.collectionDropRate !== 0)
            writer.tag(21, WireType.Bit32).float(message.collectionDropRate);
        /* float collection_object_hp_rate = 22; */
        if (message.collectionObjectHpRate !== 0)
            writer.tag(22, WireType.Bit32).float(message.collectionObjectHpRate);
        /* float collection_object_respawn_speed_rate = 23; */
        if (message.collectionObjectRespawnSpeedRate !== 0)
            writer.tag(23, WireType.Bit32).float(message.collectionObjectRespawnSpeedRate);
        /* float enemy_drop_item_rate = 24; */
        if (message.enemyDropItemRate !== 0)
            writer.tag(24, WireType.Bit32).float(message.enemyDropItemRate);
        /* string death_penalty = 25; */
        if (message.deathPenalty !== "")
            writer.tag(25, WireType.LengthDelimited).string(message.deathPenalty);
        /* bool b_enable_player_to_player_damage = 26; */
        if (message.bEnablePlayerToPlayerDamage !== false)
            writer.tag(26, WireType.Varint).bool(message.bEnablePlayerToPlayerDamage);
        /* bool b_enable_friendly_fire = 27; */
        if (message.bEnableFriendlyFire !== false)
            writer.tag(27, WireType.Varint).bool(message.bEnableFriendlyFire);
        /* bool b_enable_invader_enemy = 28; */
        if (message.bEnableInvaderEnemy !== false)
            writer.tag(28, WireType.Varint).bool(message.bEnableInvaderEnemy);
        /* bool b_active_unko = 29; */
        if (message.bActiveUnko !== false)
            writer.tag(29, WireType.Varint).bool(message.bActiveUnko);
        /* bool b_enable_aim_assist_pad = 30; */
        if (message.bEnableAimAssistPad !== false)
            writer.tag(30, WireType.Varint).bool(message.bEnableAimAssistPad);
        /* bool b_enable_aim_assist_keyboard = 31; */
        if (message.bEnableAimAssistKeyboard !== false)
            writer.tag(31, WireType.Varint).bool(message.bEnableAimAssistKeyboard);
        /* int32 drop_item_max_num = 32; */
        if (message.dropItemMaxNum !== 0)
            writer.tag(32, WireType.Varint).int32(message.dropItemMaxNum);
        /* int32 drop_item_max_num_unko = 33; */
        if (message.dropItemMaxNumUnko !== 0)
            writer.tag(33, WireType.Varint).int32(message.dropItemMaxNumUnko);
        /* int32 base_camp_max_num = 34; */
        if (message.baseCampMaxNum !== 0)
            writer.tag(34, WireType.Varint).int32(message.baseCampMaxNum);
        /* int32 base_camp_worker_max_num = 35; */
        if (message.baseCampWorkerMaxNum !== 0)
            writer.tag(35, WireType.Varint).int32(message.baseCampWorkerMaxNum);
        /* float drop_item_alive_max_hours = 36; */
        if (message.dropItemAliveMaxHours !== 0)
            writer.tag(36, WireType.Bit32).float(message.dropItemAliveMaxHours);
        /* bool b_auto_reset_guild_no_online_players = 37; */
        if (message.bAutoResetGuildNoOnlinePlayers !== false)
            writer.tag(37, WireType.Varint).bool(message.bAutoResetGuildNoOnlinePlayers);
        /* float auto_reset_guild_time_no_online_players = 38; */
        if (message.autoResetGuildTimeNoOnlinePlayers !== 0)
            writer.tag(38, WireType.Bit32).float(message.autoResetGuildTimeNoOnlinePlayers);
        /* int32 guild_player_max_num = 39; */
        if (message.guildPlayerMaxNum !== 0)
            writer.tag(39, WireType.Varint).int32(message.guildPlayerMaxNum);
        /* float pal_egg_default_hatching_time = 40; */
        if (message.palEggDefaultHatchingTime !== 0)
            writer.tag(40, WireType.Bit32).float(message.palEggDefaultHatchingTime);
        /* float work_speed_rate = 41; */
        if (message.workSpeedRate !== 0)
            writer.tag(41, WireType.Bit32).float(message.workSpeedRate);
        /* bool b_is_multiplay = 42; */
        if (message.bIsMultiplay !== false)
            writer.tag(42, WireType.Varint).bool(message.bIsMultiplay);
        /* bool b_is_pvp = 43; */
        if (message.bIsPvp !== false)
            writer.tag(43, WireType.Varint).bool(message.bIsPvp);
        /* bool b_can_pickup_other_guild_death_penalty_drop = 44; */
        if (message.bCanPickupOtherGuildDeathPenaltyDrop !== false)
            writer.tag(44, WireType.Varint).bool(message.bCanPickupOtherGuildDeathPenaltyDrop);
        /* bool b_enable_non_login_penalty = 45; */
        if (message.bEnableNonLoginPenalty !== false)
            writer.tag(45, WireType.Varint).bool(message.bEnableNonLoginPenalty);
        /* bool b_enable_fast_travel = 46; */
        if (message.bEnableFastTravel !== false)
            writer.tag(46, WireType.Varint).bool(message.bEnableFastTravel);
        /* bool b_is_start_location_select_by_map = 47; */
        if (message.bIsStartLocationSelectByMap !== false)
            writer.tag(47, WireType.Varint).bool(message.bIsStartLocationSelectByMap);
        /* bool b_exist_player_after_logout = 48; */
        if (message.bExistPlayerAfterLogout !== false)
            writer.tag(48, WireType.Varint).bool(message.bExistPlayerAfterLogout);
        /* bool b_enable_defense_other_guild_player = 49; */
        if (message.bEnableDefenseOtherGuildPlayer !== false)
            writer.tag(49, WireType.Varint).bool(message.bEnableDefenseOtherGuildPlayer);
        /* int32 coop_player_max_num = 50; */
        if (message.coopPlayerMaxNum !== 0)
            writer.tag(50, WireType.Varint).int32(message.coopPlayerMaxNum);
        /* int32 server_player_max_num = 51; */
        if (message.serverPlayerMaxNum !== 0)
            writer.tag(51, WireType.Varint).int32(message.serverPlayerMaxNum);
        /* string server_name = 52; */
        if (message.serverName !== "")
            writer.tag(52, WireType.LengthDelimited).string(message.serverName);
        /* string server_description = 53; */
        if (message.serverDescription !== "")
            writer.tag(53, WireType.LengthDelimited).string(message.serverDescription);
        /* string admin_password = 54; */
        if (message.adminPassword !== "")
            writer.tag(54, WireType.LengthDelimited).string(message.adminPassword);
        /* string server_password = 55; */
        if (message.serverPassword !== "")
            writer.tag(55, WireType.LengthDelimited).string(message.serverPassword);
        /* int32 public_port = 56; */
        if (message.publicPort !== 0)
            writer.tag(56, WireType.Varint).int32(message.publicPort);
        /* string public_ip = 57; */
        if (message.publicIp !== "")
            writer.tag(57, WireType.LengthDelimited).string(message.publicIp);
        /* bool rcon_enabled = 58; */
        if (message.rconEnabled !== false)
            writer.tag(58, WireType.Varint).bool(message.rconEnabled);
        /* int32 rcon_port = 59; */
        if (message.rconPort !== 0)
            writer.tag(59, WireType.Varint).int32(message.rconPort);
        /* string region = 60; */
        if (message.region !== "")
            writer.tag(60, WireType.LengthDelimited).string(message.region);
        /* bool b_use_auth = 61; */
        if (message.bUseAuth !== false)
            writer.tag(61, WireType.Varint).bool(message.bUseAuth);
        /* string ban_list_url = 62; */
        if (message.banListUrl !== "")
            writer.tag(62, WireType.LengthDelimited).string(message.banListUrl);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message config.v1.PalWorldSettings
 */
export const PalWorldSettings = new PalWorldSettings$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPalWorldSettingsRequest$Type extends MessageType<GetPalWorldSettingsRequest> {
    constructor() {
        super("config.v1.GetPalWorldSettingsRequest", []);
    }
    create(value?: PartialMessage<GetPalWorldSettingsRequest>): GetPalWorldSettingsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPalWorldSettingsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPalWorldSettingsRequest): GetPalWorldSettingsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPalWorldSettingsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message config.v1.GetPalWorldSettingsRequest
 */
export const GetPalWorldSettingsRequest = new GetPalWorldSettingsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPalWorldSettingsResponse$Type extends MessageType<GetPalWorldSettingsResponse> {
    constructor() {
        super("config.v1.GetPalWorldSettingsResponse", [
            { no: 1, name: "settings", kind: "message", T: () => PalWorldSettings }
        ]);
    }
    create(value?: PartialMessage<GetPalWorldSettingsResponse>): GetPalWorldSettingsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetPalWorldSettingsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPalWorldSettingsResponse): GetPalWorldSettingsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* config.v1.PalWorldSettings settings */ 1:
                    message.settings = PalWorldSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPalWorldSettingsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* config.v1.PalWorldSettings settings = 1; */
        if (message.settings)
            PalWorldSettings.internalBinaryWrite(message.settings, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message config.v1.GetPalWorldSettingsResponse
 */
export const GetPalWorldSettingsResponse = new GetPalWorldSettingsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePalWorldSettingsRequest$Type extends MessageType<UpdatePalWorldSettingsRequest> {
    constructor() {
        super("config.v1.UpdatePalWorldSettingsRequest", [
            { no: 1, name: "settings", kind: "message", T: () => PalWorldSettings },
            { no: 2, name: "update_paths", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<UpdatePalWorldSettingsRequest>): UpdatePalWorldSettingsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.updatePaths = [];
        if (value !== undefined)
            reflectionMergePartial<UpdatePalWorldSettingsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePalWorldSettingsRequest): UpdatePalWorldSettingsRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* config.v1.PalWorldSettings settings */ 1:
                    message.settings = PalWorldSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                case /* repeated string update_paths */ 2:
                    message.updatePaths.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePalWorldSettingsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* config.v1.PalWorldSettings settings = 1; */
        if (message.settings)
            PalWorldSettings.internalBinaryWrite(message.settings, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* repeated string update_paths = 2; */
        for (let i = 0; i < message.updatePaths.length; i++)
            writer.tag(2, WireType.LengthDelimited).string(message.updatePaths[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message config.v1.UpdatePalWorldSettingsRequest
 */
export const UpdatePalWorldSettingsRequest = new UpdatePalWorldSettingsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdatePalWorldSettingsResponse$Type extends MessageType<UpdatePalWorldSettingsResponse> {
    constructor() {
        super("config.v1.UpdatePalWorldSettingsResponse", [
            { no: 1, name: "settings", kind: "message", T: () => PalWorldSettings }
        ]);
    }
    create(value?: PartialMessage<UpdatePalWorldSettingsResponse>): UpdatePalWorldSettingsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<UpdatePalWorldSettingsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdatePalWorldSettingsResponse): UpdatePalWorldSettingsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* config.v1.PalWorldSettings settings */ 1:
                    message.settings = PalWorldSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdatePalWorldSettingsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* config.v1.PalWorldSettings settings = 1; */
        if (message.settings)
            PalWorldSettings.internalBinaryWrite(message.settings, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message config.v1.UpdatePalWorldSettingsResponse
 */
export const UpdatePalWorldSettingsResponse = new UpdatePalWorldSettingsResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetPalWorldSettingsRequest$Type extends MessageType<ResetPalWorldSettingsRequest> {
    constructor() {
        super("config.v1.ResetPalWorldSettingsRequest", []);
    }
    create(value?: PartialMessage<ResetPalWorldSettingsRequest>): ResetPalWorldSettingsRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResetPalWorldSettingsRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetPalWorldSettingsRequest): ResetPalWorldSettingsRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ResetPalWorldSettingsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message config.v1.ResetPalWorldSettingsRequest
 */
export const ResetPalWorldSettingsRequest = new ResetPalWorldSettingsRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetPalWorldSettingsResponse$Type extends MessageType<ResetPalWorldSettingsResponse> {
    constructor() {
        super("config.v1.ResetPalWorldSettingsResponse", [
            { no: 1, name: "settings", kind: "message", T: () => PalWorldSettings }
        ]);
    }
    create(value?: PartialMessage<ResetPalWorldSettingsResponse>): ResetPalWorldSettingsResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<ResetPalWorldSettingsResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResetPalWorldSettingsResponse): ResetPalWorldSettingsResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* config.v1.PalWorldSettings settings */ 1:
                    message.settings = PalWorldSettings.internalBinaryRead(reader, reader.uint32(), options, message.settings);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResetPalWorldSettingsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* config.v1.PalWorldSettings settings = 1; */
        if (message.settings)
            PalWorldSettings.internalBinaryWrite(message.settings, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message config.v1.ResetPalWorldSettingsResponse
 */
export const ResetPalWorldSettingsResponse = new ResetPalWorldSettingsResponse$Type();
