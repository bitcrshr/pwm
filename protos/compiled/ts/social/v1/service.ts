// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "service.proto" (package "social.v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message social.v1.Player
 */
export interface Player {
    /**
     * @generated from protobuf field: string name = 1;
     */
    name: string;
    /**
     * @generated from protobuf field: string uid = 2;
     */
    uid: string;
    /**
     * @generated from protobuf field: string steam_id = 3;
     */
    steamId: string;
}
/**
 * @generated from protobuf message social.v1.GetOnlinePlayersRequest
 */
export interface GetOnlinePlayersRequest {
}
/**
 * @generated from protobuf message social.v1.GetOnlinePlayersResponse
 */
export interface GetOnlinePlayersResponse {
    /**
     * @generated from protobuf field: repeated social.v1.Player players = 1;
     */
    players: Player[];
}
/**
 * @generated from protobuf message social.v1.GetServerPlayersRequest
 */
export interface GetServerPlayersRequest {
}
/**
 * @generated from protobuf message social.v1.GetServerPlayersResponse
 */
export interface GetServerPlayersResponse {
    /**
     * @generated from protobuf field: repeated social.v1.Player players = 1;
     */
    players: Player[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Player$Type extends MessageType<Player> {
    constructor() {
        super("social.v1.Player", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "steam_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Player>): Player {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        message.uid = "";
        message.steamId = "";
        if (value !== undefined)
            reflectionMergePartial<Player>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Player): Player {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* string uid */ 2:
                    message.uid = reader.string();
                    break;
                case /* string steam_id */ 3:
                    message.steamId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Player, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* string uid = 2; */
        if (message.uid !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.uid);
        /* string steam_id = 3; */
        if (message.steamId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.steamId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message social.v1.Player
 */
export const Player = new Player$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOnlinePlayersRequest$Type extends MessageType<GetOnlinePlayersRequest> {
    constructor() {
        super("social.v1.GetOnlinePlayersRequest", []);
    }
    create(value?: PartialMessage<GetOnlinePlayersRequest>): GetOnlinePlayersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetOnlinePlayersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOnlinePlayersRequest): GetOnlinePlayersRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetOnlinePlayersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message social.v1.GetOnlinePlayersRequest
 */
export const GetOnlinePlayersRequest = new GetOnlinePlayersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOnlinePlayersResponse$Type extends MessageType<GetOnlinePlayersResponse> {
    constructor() {
        super("social.v1.GetOnlinePlayersResponse", [
            { no: 1, name: "players", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Player }
        ]);
    }
    create(value?: PartialMessage<GetOnlinePlayersResponse>): GetOnlinePlayersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.players = [];
        if (value !== undefined)
            reflectionMergePartial<GetOnlinePlayersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOnlinePlayersResponse): GetOnlinePlayersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated social.v1.Player players */ 1:
                    message.players.push(Player.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOnlinePlayersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated social.v1.Player players = 1; */
        for (let i = 0; i < message.players.length; i++)
            Player.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message social.v1.GetOnlinePlayersResponse
 */
export const GetOnlinePlayersResponse = new GetOnlinePlayersResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetServerPlayersRequest$Type extends MessageType<GetServerPlayersRequest> {
    constructor() {
        super("social.v1.GetServerPlayersRequest", []);
    }
    create(value?: PartialMessage<GetServerPlayersRequest>): GetServerPlayersRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<GetServerPlayersRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetServerPlayersRequest): GetServerPlayersRequest {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetServerPlayersRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message social.v1.GetServerPlayersRequest
 */
export const GetServerPlayersRequest = new GetServerPlayersRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetServerPlayersResponse$Type extends MessageType<GetServerPlayersResponse> {
    constructor() {
        super("social.v1.GetServerPlayersResponse", [
            { no: 1, name: "players", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Player }
        ]);
    }
    create(value?: PartialMessage<GetServerPlayersResponse>): GetServerPlayersResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.players = [];
        if (value !== undefined)
            reflectionMergePartial<GetServerPlayersResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetServerPlayersResponse): GetServerPlayersResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated social.v1.Player players */ 1:
                    message.players.push(Player.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetServerPlayersResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated social.v1.Player players = 1; */
        for (let i = 0; i < message.players.length; i++)
            Player.internalBinaryWrite(message.players[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message social.v1.GetServerPlayersResponse
 */
export const GetServerPlayersResponse = new GetServerPlayersResponse$Type();
/**
 * @generated ServiceType for protobuf service social.v1.SocialService
 */
export const SocialService = new ServiceType("social.v1.SocialService", [
    { name: "GetOnlinePlayers", options: {}, I: GetOnlinePlayersRequest, O: GetOnlinePlayersResponse },
    { name: "GetServerPlayers", options: {}, I: GetServerPlayersRequest, O: GetServerPlayersResponse }
]);
